const productsURL = "http://localhost:3000/products";

export async function renderProducts() {
  try {
    const res = await fetch(productsURL);
    const json = await res.json();
    const products = json.data;

    const content = document.getElementById("content");
    content.innerHTML = `
      <h2>Qu·∫£n l√Ω s·∫£n ph·∫©m</h2>
      <div class="search-add">
    <input type="text" id="searchProductInput" placeholder="üîç T√¨m s·∫£n ph·∫©m..." />

        <button id="addProductBtn">‚ûï Th√™m s·∫£n ph·∫©m</button>
      </div>

      <table>
        <thead>
          <tr>
            <th>STT</th>
            <th>T√™n</th>
            <th>Gi√°</th>
            <th>Gi·∫£m</th>
            <th>·∫¢nh</th>
            <th>H√†nh ƒë·ªông</th>
          </tr>
        </thead>
        <tbody>
          ${products.map((p, i) => `
            <tr>
              <td>${i + 1}</td>
              <td>${p.name}</td>
              <td>${p.price.toLocaleString()}ƒë</td>
              <td>${p.salePrice?.toLocaleString() || '0'}ƒë</td>
              <td><img src="${p.thumbnail}" width="50" /></td>
              <td>
                <button class="editBtn" data-id="${p._id}">S·ª≠a</button>
                <button class="deleteBtn" data-id="${p._id}">X√≥a</button>
              </td>
            </tr>
          `).join("")}
        </tbody>
      </table>
    `;
    document.getElementById("searchProductInput").oninput = (e) => {
      const keyword = e.target.value.trim().toLowerCase();
      const rows = document.querySelectorAll("tbody tr");
    
      rows.forEach((row) => {
        const name = row.children[1].textContent.toLowerCase();
        row.style.display = name.includes(keyword) ? "table-row" : "none";
      });
    };
    
    document.getElementById("addProductBtn").onclick = showAddProductForm;
    document.querySelectorAll(".editBtn").forEach(btn => btn.onclick = () => showEditProductForm(btn.dataset.id));
    document.querySelectorAll(".deleteBtn").forEach(btn => btn.onclick = () => deleteProduct(btn.dataset.id));
  } catch (err) {
    console.error("L·ªói khi t·∫£i s·∫£n ph·∫©m:", err);
  }
}

function openModal(contentHTML) {
  document.getElementById("modalBody").innerHTML = contentHTML;
  document.getElementById("categoryModal").style.display = "block";
}
function closeModal() {
  document.getElementById("categoryModal").style.display = "none";
}
window.closeModal = closeModal;

// Th√™m s·∫£n ph·∫©m
function showAddProductForm() {
  openModal(`
    <h3>Th√™m s·∫£n ph·∫©m m·ªõi</h3>
    <form id="addProductForm" enctype="multipart/form-data">
      <input name="name" placeholder="T√™n s·∫£n ph·∫©m" required />
      <input name="slug" placeholder="Slug" required />
      <input name="description" placeholder="M√¥ t·∫£" required />
      <input name="price" type="number" placeholder="Gi√°" required />
      <input name="salePrice" type="number" placeholder="Gi√° gi·∫£m" />
      <input name="categoryId" placeholder="ID danh m·ª•c" required />

      <label>Thumbnail</label>
      <input type="file" name="thumbnail" required />
      <label>H√¨nh ·∫£nh chi ti·∫øt</label>
      <input type="file" name="images" multiple />

      <button type="submit">Th√™m</button>
    </form>
  `);

  document.getElementById("addProductForm").onsubmit = handleAddProduct;
}

async function handleAddProduct(e) {
  e.preventDefault();
  const formData = new FormData(e.target);

  try {
    const res = await fetch(`${productsURL}/add`, {
      method: "POST",
      body: formData
    });
    const result = await res.json();
    if (result.success) {
      alert("‚úÖ ƒê√£ th√™m s·∫£n ph·∫©m");
      closeModal();
      renderProducts();
    } else throw new Error(result.message);
  } catch (err) {
    alert("‚ùå " + err.message);
  }
}

// S·ª≠a s·∫£n ph·∫©m
async function showEditProductForm(id) {
  try {
    const res = await fetch(productsURL);
    const json = await res.json();
    const product = json.data.find(p => p._id === id);

    openModal(`
      <h3>S·ª≠a s·∫£n ph·∫©m</h3>
      <form id="editProductForm" enctype="multipart/form-data">
        <input name="name" value="${product.name}" required />
        <input name="slug" value="${product.slug}" required />
        <input name="description" value="${product.description}" required />
        <input name="price" type="number" value="${product.price}" required />
        <input name="salePrice" type="number" value="${product.salePrice || 0}" />
        <input name="categoryId" value="${product.categoryId}" required />

        <input type="hidden" name="oldThumbnail" value="${product.thumbnail}" />
        <input type="hidden" name="oldImages" value="${product.images.join(',')}" />

        <label>Thumbnail (n·∫øu ƒë·ªïi)</label>
        <input type="file" name="thumbnail" />
        <label>·∫¢nh chi ti·∫øt (n·∫øu ƒë·ªïi)</label>
        <input type="file" name="images" multiple />

        <button type="submit">C·∫≠p nh·∫≠t</button>
      </form>
    `);

    document.getElementById("editProductForm").onsubmit = (e) => handleEditProduct(e, id);
  } catch (err) {
    alert("L·ªói t·∫£i s·∫£n ph·∫©m");
  }
}

async function handleEditProduct(e, id) {
  e.preventDefault();
  const formData = new FormData(e.target);

  try {
    const res = await fetch(`${productsURL}/${id}`, {
      method: "PUT",
      body: formData
    });
    const result = await res.json();
    if (result.success) {
      alert("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng");
      closeModal();
      renderProducts();
    } else throw new Error(result.message);
  } catch (err) {
    alert("‚ùå " + err.message);
  }
}

// Xo√° s·∫£n ph·∫©m
async function deleteProduct(id) {
  if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën xo√° s·∫£n ph·∫©m n√†y?")) return;

  try {
    const res = await fetch(`${productsURL}/${id}`, {
      method: "DELETE"
    });
    const result = await res.json();
    if (result.success) {
      alert("‚úÖ ƒê√£ xo√°");
      renderProducts();
    } else throw new Error(result.message);
  } catch (err) {
    alert("‚ùå " + err.message);
  }
}

